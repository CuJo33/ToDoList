{"version":3,"sources":["cujo_head.jpg","Clear.js","actions.js","Add.js","Link.js","LinkContainer.js","Links.js","Item.js","VisibleItems.js","VisibleItemList.js","App.js","serviceWorker.js","reducer.js","index.js"],"names":["module","exports","connect","props","Button","id","type","VisibilityFilters","input","Card","className","Body","htmlFor","Form","onSubmit","e","text","preventDefault","value","trim","dispatch","ref","node","Link","Nav","Item","eventKey","filter","onClick","disabled","active","children","LinkContainer","state","ownProps","setVisibilityFilter","Links","variant","defaultActiveKey","useState","clicked","cClicked","description","cValue","style","textDecoration","completed","color","prev","editClick","onChange","target","handleChange","removeClick","VisibleItems","Table","items","map","item","key","onItemClick","getVisibleItems","t","VisibleItemList","visibilityFilter","toggleItem","removeItem","editItem","App","Navbar","bg","src","Cujo_head","alt","width","height","Brand","Container","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","lastNumber","JSON","stringify","length","Object","assign","persistedState","serializedState","localStorage","getItem","parse","loadState","store","createStore","subscribe","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d9c49fb6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cujo_head.7f2606f0.jpg\";","import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Clear = (props) => {\r\n  return (\r\n    <>\r\n      <Button id=\"clear-button\" type=\"submit\">\r\n        Clear List\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect()(Clear);\r\n","export const ADD_ITEM = \"ADD_ITEM\";\r\nexport const REMOVE_ITEM = \"REMOVE_ITEM\";\r\nexport const EDIT_ITEM = \"EDIT_ITEM\";\r\nexport const CLEAR_ITEM = \"CLEAR_ITEM\";\r\nexport const TOGGLE_ITEM = \"TOGGLE_ITEM\";\r\nexport const SET_VISIBILITY_FILTER = \"SET_VISIBILITY_FILTER\";\r\n\r\nexport const VisibilityFilters = {\r\n  SHOW_ALL: \"SHOW_ALL\",\r\n  SHOW_COMPLETED: \"SHOW_COMPLETED\",\r\n  SHOW_ACTIVE: \"SHOW_ACTIVE\",\r\n};\r\n\r\nexport function addItem(text, id) {\r\n  return {\r\n    type: ADD_ITEM,\r\n    id,\r\n    text,\r\n  };\r\n}\r\n\r\nexport function toggleItem(id) {\r\n  return {\r\n    type: TOGGLE_ITEM,\r\n    id,\r\n  };\r\n}\r\n\r\nexport function setVisibilityFilter(filter) {\r\n  return {\r\n    type: SET_VISIBILITY_FILTER,\r\n    filter,\r\n  };\r\n}\r\n\r\nexport function removeItem(id) {\r\n  return {\r\n    type: REMOVE_ITEM,\r\n    id,\r\n  };\r\n}\r\n\r\nexport function editItem(text, id) {\r\n  return {\r\n    type: EDIT_ITEM,\r\n    id,\r\n    text,\r\n  };\r\n}\r\n\r\nexport function clearItem(id) {\r\n  return {\r\n    type: CLEAR_ITEM,\r\n    id,\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Clear from \"./Clear\";\r\nimport { connect } from \"react-redux\";\r\nimport { addItem } from \"./actions\";\r\nimport { clearItem } from \"./actions\";\r\n\r\nconst Add = (props) => {\r\n  let input;\r\n  return (\r\n    <>\r\n      <Card className=\"mb-4 mt-2\">\r\n        <Card.Body>\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <label htmlFor=\"Add\">\r\n                What would you like to add to your to do list?\r\n              </label>\r\n              <Form\r\n                onSubmit={(e) => {\r\n                  e.preventDefault();\r\n                  if (!input.value.trim()) {\r\n                    return;\r\n                  }\r\n                  props.dispatch(addItem(input.value));\r\n                  input.value = \"\";\r\n                }}\r\n              >\r\n                <input\r\n                  className=\"mb-2\"\r\n                  ref={(node) => {\r\n                    input = node;\r\n                  }}\r\n                />\r\n                <Button className=\"add-button\" type=\"submit\">\r\n                  Add Item{\" \"}\r\n                </Button>\r\n              </Form>\r\n            </div>\r\n            <div className=\"col\">\r\n              <label id=\"clearlistlabel\" htmlFor=\"Clear\">\r\n                Clear all Items from list\r\n              </label>\r\n              <Form\r\n                onSubmit={(e) => {\r\n                  e.preventDefault();\r\n                  props.dispatch(clearItem(input.value));\r\n                }}\r\n              >\r\n                <Clear />\r\n              </Form>\r\n            </div>\r\n          </div>\r\n        </Card.Body>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect()(Add);\r\n","import React from \"react\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\n\r\nfunction Link(props) {\r\n  return (\r\n    <>\r\n      <Nav.Item>\r\n        <Nav.Link\r\n          eventKey={props.filter}\r\n          onClick={() => props.onClick()}\r\n          disabled={props.active}\r\n        >\r\n          {props.children}\r\n        </Nav.Link>\r\n      </Nav.Item>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Link;\r\n","import { connect } from \"react-redux\";\r\nimport { setVisibilityFilter } from \"./actions\";\r\nimport Link from \"./Link\";\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n  return {\r\n    active: ownProps.filter === state.setVisibilityFilter,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch, ownProps) {\r\n  return {\r\n    onClick: () => dispatch(setVisibilityFilter(ownProps.filter)),\r\n  };\r\n}\r\n\r\nconst LinkContainer = connect(mapStateToProps, mapDispatchToProps)(Link);\r\n\r\nexport default LinkContainer;\r\n","import React from \"react\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport LinkContainer from \"./LinkContainer\";\r\nimport { VisibilityFilters } from \"./actions\";\r\n\r\nfunction Links() {\r\n  return (\r\n    <>\r\n      <Nav variant=\"tabs\" defaultActiveKey=\"All\">\r\n        <LinkContainer filter={VisibilityFilters.SHOW_ALL}>All</LinkContainer>\r\n        <LinkContainer filter={VisibilityFilters.SHOW_ACTIVE}>\r\n          To Do\r\n        </LinkContainer>\r\n        <LinkContainer filter={VisibilityFilters.SHOW_COMPLETED}>\r\n          Done\r\n        </LinkContainer>\r\n      </Nav>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Links;\r\n","import React, { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nfunction Item(props) {\r\n  const [clicked, cClicked] = useState(false);\r\n\r\n  const [value, cValue] = useState(props.description);\r\n\r\n  const handleChange = (e) => {\r\n    e.preventDefault();\r\n    cValue(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <tr>\r\n      <td>{props.id}</td>\r\n      <td>\r\n        <span\r\n          style={{\r\n            textDecoration: props.completed ? \"line-through\" : \"none\",\r\n            color: props.completed ? \"red\" : \"black\",\r\n          }}\r\n        >\r\n          {clicked ? (\r\n            <Form\r\n              onSubmit={(e) => {\r\n                e.preventDefault();\r\n                if (!value.trim() === props.description) {\r\n                  cClicked((prev) => !prev);\r\n                  return;\r\n                }\r\n                cClicked((prev) => !prev);\r\n                props.editClick(value, props.id);\r\n              }}\r\n            >\r\n              <input onChange={(e) => handleChange(e)} value={value} />\r\n              <Button className=\"itembuttons\" type=\"submit\">\r\n                Update Item\r\n              </Button>\r\n            </Form>\r\n          ) : (\r\n            props.description\r\n          )}\r\n        </span>\r\n      </td>\r\n\r\n      <td>\r\n        <Button\r\n          className=\"itembuttons\"\r\n          variant={props.completed ? \"warning\" : \"success\"}\r\n          onClick={props.onClick}\r\n        >\r\n          {props.completed ? \"Undo\" : \"Complete\"}\r\n        </Button>\r\n\r\n        <Button\r\n          className=\"itembuttons\"\r\n          variant=\"info\"\r\n          onClick={() => cClicked((prev) => !prev)}\r\n          // onsubmit of that function to then pass up into redux\r\n        >\r\n          Edit\r\n        </Button>\r\n        <Button\r\n          className=\"itembuttons\"\r\n          variant=\"danger\"\r\n          onClick={props.removeClick}\r\n        >\r\n          Remove\r\n        </Button>\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default Item;\r\n","import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Item from \"./Item\";\r\nimport \"./index.css\";\r\n\r\nfunction VisibleItems(props) {\r\n  return (\r\n    <>\r\n      <Table>\r\n        <thead>\r\n          <tr>\r\n            <th>ID</th>\r\n            <th>Item</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.items.map((item) => (\r\n            <Item\r\n              key={item.id}\r\n              {...item}\r\n              onClick={() => props.onItemClick(item.id)}\r\n              removeClick={() => props.removeClick(item.id)}\r\n              editClick={(text, id) => props.editClick(text, id)}\r\n            />\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default VisibleItems;\r\n","import { connect } from \"react-redux\";\r\nimport { toggleItem } from \"./actions\";\r\nimport { editItem } from \"./actions\";\r\nimport { removeItem } from \"./actions\";\r\nimport VisibleItems from \"./VisibleItems\";\r\n\r\nfunction getVisibleItems(items, filter) {\r\n  switch (filter) {\r\n    case \"SHOW_COMPLETED\":\r\n      return items.filter((t) => t.completed);\r\n    case \"SHOW_ACTIVE\":\r\n      return items.filter((t) => !t.completed);\r\n    case \"SHOW_ALL\":\r\n    default:\r\n      return items;\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    items: getVisibleItems(state.items, state.visibilityFilter),\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onItemClick: (id) => {\r\n      dispatch(toggleItem(id));\r\n    },\r\n    removeClick: (id) => {\r\n      dispatch(removeItem(id));\r\n    },\r\n    editClick: (text, id) => {\r\n      dispatch(editItem(text, id));\r\n    },\r\n  };\r\n}\r\n\r\nconst VisibleItemList = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(VisibleItems);\r\n\r\nexport default VisibleItemList;\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Add from \"./Add\";\r\nimport Links from \"./Links\";\r\nimport VisibleItemList from \"./VisibleItemList\";\r\nimport Cujo_head from \"./cujo_head.jpg\";\r\nimport \"./index.css\";\r\n\r\nconst App = (props) => {\r\n  return (\r\n    <>\r\n      <Navbar bg=\"info\" variant=\"dark\">\r\n        <img\r\n          className=\"ml-3\"\r\n          id=\"logo\"\r\n          src={Cujo_head}\r\n          alt=\"Creator avatar\"\r\n          width=\"100\"\r\n          height=\"100\"\r\n        />\r\n        <Navbar.Brand className=\"ml-3\" id=\"branding-header\">\r\n          presents...\r\n        </Navbar.Brand>\r\n      </Navbar>\r\n      <Container className=\"mt-5\" id=\"container-box\">\r\n        <br />\r\n        <h2 className=\"ml-3 mb-3\">A To Do List</h2>\r\n        <Add />\r\n        <Links />\r\n        <VisibleItemList />\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {\r\n  VisibilityFilters,\r\n  ADD_ITEM,\r\n  REMOVE_ITEM,\r\n  EDIT_ITEM,\r\n  CLEAR_ITEM,\r\n  TOGGLE_ITEM,\r\n  SET_VISIBILITY_FILTER,\r\n} from \"./actions.js\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nfunction visibilityFilterReducer(state = VisibilityFilters.SHOW_ALL, action) {\r\n  switch (action.type) {\r\n    case SET_VISIBILITY_FILTER:\r\n      return action.filter;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction itemReducer(state = [], action) {\r\n  let lastNumber = 0;\r\n  if (JSON.stringify(state) != \"[]\") {\r\n    lastNumber = state[state.length - 1].id + 1;\r\n  }\r\n  switch (action.type) {\r\n    case ADD_ITEM:\r\n      return [\r\n        ...state,\r\n        {\r\n          id: lastNumber,\r\n          description: action.text,\r\n          completed: false,\r\n        },\r\n      ];\r\n    case REMOVE_ITEM:\r\n      return state.filter((value) => {\r\n        return action.id !== value.id;\r\n      });\r\n    case CLEAR_ITEM:\r\n      return [];\r\n    case TOGGLE_ITEM:\r\n      return state.map((item) => {\r\n        if (item.id === action.id) {\r\n          return Object.assign({}, item, {\r\n            completed: !item.completed,\r\n          });\r\n        }\r\n        return item;\r\n      });\r\n    case EDIT_ITEM:\r\n      return state.map((item) => {\r\n        if (item.id === action.id) {\r\n          return Object.assign({}, item, {\r\n            description: action.text,\r\n          });\r\n        }\r\n        return item;\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const rootReducer = combineReducers({\r\n  visibilityFilter: visibilityFilterReducer,\r\n  items: itemReducer,\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore } from \"redux\";\r\nimport { rootReducer } from \"./reducer\";\r\n\r\nfunction loadState() {\r\n  const serializedState = localStorage.getItem(\"state\");\r\n  if (!serializedState) {\r\n    return;\r\n  }\r\n  return JSON.parse(serializedState);\r\n}\r\n\r\nfunction saveState(state) {\r\n  const serializedState = JSON.stringify(state);\r\n  localStorage.setItem(\"state\", serializedState);\r\n}\r\n\r\nconst persistedState = loadState();\r\nconst store = createStore(rootReducer, persistedState);\r\n\r\nstore.subscribe(() => {\r\n  saveState(store.getState());\r\n});\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}